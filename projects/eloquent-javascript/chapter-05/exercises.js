// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  return array.flat();
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
//from EQJS5 resources
function loop(start, test, update, body) {
for(let value = start; test(value); value = update(value)) {
  body(value);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(value, test) {
  for(let i = 0; i < value.length; i++ ) {
if(!test(value[i])) {
  return false;
    }
  }
    return true;
  }

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
//Found this after talking to friends. Very confused.

function dominantDirection(str) {
  
  const arr = countBy(str, function(char){
    //get the unicode value for the current character
    const unicode = char.charCodeAt();
    // find the script obj from the unicode character
    const script = characterScript(unicode);
    // returning the name of the script direction or null
    
    if(script !== null) {
      return script.direction;
    } else {
      return script;
    }
  });
  
  //find the next highest count by sorting
  arr.sort(function(a, b) {
    return b.count - a.count; //need to append with .count else will sort first digit first
  });
  return arr[0].name; //returns dominant result
  
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
